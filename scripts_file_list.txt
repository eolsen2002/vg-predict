analyze_lows.py - uses def check_low with "signals/all_etfs_post_peak_lows.csv"
analyze_peaks.py - uses def check_peak with "signals/all_etfs_peaks.csv"
analyze_rotations.py -to analyze rotations using etf_prices_2023_2025.csv 
analyze_signals.py - Unified logic for checking low or peak signal for an ETF with countdown to next signal
daily_usfr_report.py - Placeholder file to #1 Create a daily-run script that: Runs the is_today_usfr_low.py logic, Prints or saves the output summary, Optionally emails or logs the report somewhere; 
#2: Use a scheduler to run the script daily
etf_rotation_backtest.py # Load backtest summary CSV and # Calculate average post-USFR-peak returns per ETF etc.
fetch_etf_data.py - Script to fetch ETF daily price and volume data from Yahoo Finance; 
Saves output to CSV for use in swing signal scripts and dashboard.
fetch_rrp_data.py - Pseudo code placeholder from ChatGPT, 6/10/25, 8:55 AM, via FRED API
generate_low_csvs.py - Purpose: Generate post-peak low CSVs for 6 Treasury ETFs using ETF-specific timing rules. USFR:     peak = day 18–25, low = next 1–6 calendar days
Others:   peak = last trading day of month or prior if weekend, low = next 1–3 trading days
Input: data/etf_prices_2023_2025.csvl Output: signals/[etf]_post_peak_lows.csv
generate_peak_csvs.py - Purpose: Generate post-peak peak CSVs for 6 Treasury ETFs using ETF-specific timing rules. USFR:     peak = day 18–25, validate with 10-day prior low
Others:   peak = highest in last 3 trading days of calendar month; Input: data/etf_prices_2023_2025.csv; Output: signals/[etf]_post_peak_highs.csv
generate_peak_low_signals.py - use data/etf_prices_2023_2025.csv for all 6 EFTs with get_last_trading_day and find_peak_dates, etc.
is_today_sgov_low.py - determine if today is low SGOV (buy) day using signals/sgov_post_peak_lows.csv
is_today_usfr_low.py - similar logic to sgov_low file but with signals/usfr_post_peak_lows.csv
sgov_post_peak_lows.py - This script will: Load your existing price dataset; Find SGOV's monthly peak (between the 18th–23rd); Identify the lowest price in the following 6 calendar days; and Export the results to signals/sgov_post_peak_lows.csv
split_usfr_highs_lows.py - uses signals/usfr_post_peak_highs.csv
usfr_post_peak_lows.py - Description: Detects USFR's lowest price within 1–3 trading days after its monthly peak (typically days 21–26)
to identify ideal re-entry points. Outputs CSV with monthly peak/low dates and drop percentages.
__init__.py
__pycache__
